// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = "file:./../../dev.db"
}

plugin prisma {
  provider = "@core/prisma"
  output = "./generated/prisma/schema.prisma"
  format = true
}

plugin zod {
  provider = "@core/zod"
  output = "./generated/zen/zod"
  compile = false
}

plugin enhancer {
  provider = '@core/enhancer'
  generatePermissionChecker = true
}

abstract model BarkModel extends BaseModel {
  path     String @unique
  depth    Int
  numchild Int    @default(0)
}

abstract model BaseModel {
  // META
  created_at DateTime @default(now())
  id         String   @id @default(cuid())
  is_enabled Boolean  @default(true)
  is_public  Boolean  @default(false)
  rank       Int      @default(0)
  updated_at DateTime @default(now()) @updatedAt

  @@allow("all", auth().role == ADMIN || auth().role == DEV)
  // @@allow("read", is_public == true)
}

model User extends BaseModel {
  role                   Role
  organizations_to_users OrganizationToUser[]

  @@map("users")
}

enum Role {
  ADMIN
  DEV
  USER
}

// prisma/schema.prisma
model node extends BarkModel {
  // Extension's internal fields
  // id       Int    @id @default(autoincrement())
  // path     String @unique
  // depth    Int
  // numchild Int    @default(0)
    
  // Your fields go here...
  name String

  @@index([path])
}

model Organization extends BaseModel {
  name                   String
  organizations_to_users OrganizationToUser[]
  opportunities          Opportunity[]
  // organization_permissions OrganizationPermission?
  parent_organization    Organization?        @relation("OrganizationHierarchy", fields: [parent_id], references: [id])
  parent_id              String?
  child_organizations    Organization[]       @relation("OrganizationHierarchy")

  @@index([parent_id])

  // @@allow("create", auth().role == "admin")
  @@map("organizations")

  @@allow('all', true)
}

model Opportunity extends BaseModel {
  name            String
  organization    Organization @relation(fields: [organization_id], references: [id])// One-to-many relationship with Org
  organization_id String

  @@index([organization_id])

  @@map("opportunities")

  @@allow("create", auth().role == ADMIN || auth().role == DEV)
  @@allow("create", organization.organizations_to_users?[role_to_org == ADMIN])
  @@allow("update,delete,read", auth().role == ADMIN || auth().role == DEV)
}

model OrganizationToUser extends BaseModel {
  role_to_org     Role         @default(ADMIN)
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  user            User         @relation(fields: [user_id], references: [id])
  user_id         String

  @@unique([organization_id, user_id])

  @@map("organizations_to_users")

  @@allow("all", auth().role == ADMIN || auth().role == DEV)
}

model OrganizationPermission extends BaseModel {
  // organization    Organization @relation(fields: [organization_id], references: [id])
  // organization_id String       @unique
  permissions Json

  @@map("organization_permissions")
  @@allow("all", auth().role == ADMIN || auth().role == DEV)
}